public class MyLinkedList {
    Node first, last;
    int size;

    public MyLinkedList() {
        first = null;
        last = null;
        size = 0;
    }

    public void print() {
        Node constant = null;
        Node tmp = this.first;
        while (tmp != null) {
            if (tmp.pow != 0) {
                System.out.print("(" + tmp.co + "x^" + tmp.pow + ")+ ");
                tmp = tmp.next;
            } else {
                System.out.print(tmp.co + "+");//if powers of x equals zero the code don't write them
                tmp = tmp.next;
            }

        }

        System.out.println();

    }

    public int Search(int k) {
        int a = 0;
        Node tmp = first;
        while (tmp != null && a == 0) {
            if (tmp.pow == k) {

                a++;
            }
            tmp = tmp.next;
        }
        return a;

    }

    public void Delete(int k) {

        Node tmp = first;
        Node tmp2 = null;

        while (tmp != null && tmp.pow == k) {
            first = tmp.next;
            tmp = first;

        }//delete and sort
        while (tmp != null) {
            while (tmp != null && tmp.pow != k) {
                tmp2 = tmp;
                tmp = tmp.next;
            }
            if (tmp == null) {

                return;
            }
            tmp2.next = tmp.next;
            tmp = tmp2.next;

        }

    }

    public static MyLinkedList multiply(MyLinkedList l1, MyLinkedList l2) {
        MyLinkedList multipied = new MyLinkedList();
        MyLinkedList l3 = new MyLinkedList();
        Node a, b;
        a = l1.first;
        b = l2.first;
        int col1, pow1 = 0;
        if (a == null || b == null) {
            System.out.println("One of the lists is empty");

        }
        while (a != null) {

            while (b != null) {

                pow1 = a.pow + b.pow;
                col1 = a.co * b.co;

                l3.insertfirst(col1, pow1);
                b = b.next;

            }

            a = a.next;
            b = l2.first;
        }
        l3.listorder();
        return l3;
    }

    public void listorder() {
        Node current = first;
        Node constant = null;
        Node index = null;
        int temp = 0;
        int temp1 = 0;

        while (current != null) {
            index = current.next;

            while (index != null) {

                if (current.pow < index.pow) {//if the index node is larger than the previous one,it changes place and continues in this way until the loop ends.

                    temp = current.pow;
                    temp1 = current.co;
                    current.pow = index.pow;
                    current.co = index.co;
                    index.pow = temp;
                    index.co = temp1;

                }

                index = index.next;

            }

            current = current.next;

        }
        current = first;
   
       

    }

    static void removeDuplicates(MyLinkedList k1) {
        Node p, p2, dup;
        p = k1.first;

        while (p != null && p.next != null) {
            p2 = p;

            while (p2.next != null) {

                if (p.pow == p2.next.pow) {

                    //  If powerer of two elements are same add their coefficients and put it in 1st element 
                    dup = p2.next;
                    p2.next = p2.next.next;

                } else {
                    p2 = p2.next;
                }
            }
            p = p.next;
        }
    }

    public static MyLinkedList add(MyLinkedList a) {//I merged two linked list in 1 list
        Node current = a.first;
        Node index = a.first;
        int k = 0;
        int c = 0;
        MyLinkedList result = new MyLinkedList();
        int co = 0;
        int pow = 0;

        while (current != null) {
            co = 0;
            pow = 0;

            c = 0;
            index = a.first;
            while (index != null) {
                if (index.pow == current.pow && k != c) {//k and c  like an array index
                    co = index.co + current.co;
                    pow = index.pow;
                }

                c++;
                index = index.next;
            }
            if (co != 0) {
                result.insertfirst(co, pow);
            } else {
                result.insertfirst(current.co, current.pow);

            }

            k++;
            current = current.next;

        }
        removeDuplicates(result);
        result.listorder();
        return result;
    }

    void insertLast(int c, int d) {// eğer list  order da kullanmıyacaksan sil

        Node n1 = new Node(c, d);
        if (first == null) {
            first = n1;
            last = n1;
                    size++;

        } else {
            last.next = n1;
            last = n1;
        size++;

        }

    }

    void merge(MyLinkedList l1) {
        Node acurrent = first, l1curren = l1.first;
        Node anext, l1next;//Since head of first list never changes I used a single pointer for l1
        while (acurrent != null && l1curren != null) {
            // save nexts pointers
            anext = acurrent.next;
            l1next = l1curren.next;

            l1curren.next = anext;//We connect l1 to the list
            acurrent.next = l1curren;

            acurrent = anext;
            l1curren = l1next;
        }
        l1.first = l1curren;
    }

    void insertfirst(int c, int d) {
        Node n1 = new Node(c, d);
        if (first == null) {
            first = n1;
            last = n1;
        } else {
            n1.next = first;
            first = n1;
        }
        size++;
    }

    public static void main(String[] args) {
        MyLinkedList l1 = new MyLinkedList();
        MyLinkedList l2 = new MyLinkedList();
        MyLinkedList l3 = new MyLinkedList();
        MyLinkedList l4 = new MyLinkedList();

        Scanner sc = new Scanner(System.in);
        int a, b;
        System.out.println("Enter the coefficient and power of the first polynomial. Type 0 at the end");
        do {
            a = sc.nextInt();
            if (a == 0) {
                break;
            }
            b = sc.nextInt();
            Node n1 = new Node(a, b);

            l1.insertfirst(a, b);
            l3.insertfirst(a, b);
        } while (a != 0);
        System.out.println("Enter the coefficient and power of the second polynomial. Type 0 at the end");
        do {
            a = sc.nextInt();
            if (a == 0) {
                break;
            }
            b = sc.nextInt();
            Node n2 = new Node(a, b);

            l2.insertfirst(a, b);
            l4.insertfirst(a, b);
        } while (a != 0);
        System.out.println("The entered polynomials are: ");
        l1.listorder();
        l1.print();
        l2.listorder();

        l2.print();
        System.out.println(" Which task you want to do?\n"
                + "1- Add\n"
                + "2- Multiply\n"
                + "3- Print\n"
                + "4- Delete\n" + "5- Exit\n" + "Please enter a digit (1-5): ");
        int n = 0;
        while (n != 5) {
            n = sc.nextInt();
            switch (n) {
                case 1:
                    System.out.println("Adding two polynomials: ");

                    System.out.println("the sum");
                    l3.merge(l4);
                    add(l3).print();

                    System.out.println("Please enter a digit (1-5): ");

                    break;
                case 2:
                    System.out.println("Multiplying two polynomials: ");
                    add(multiply(l1, l2)).print();

                    System.out.println("Please enter a digit (1-5): ");
                    break;
                case 3:
                    System.out.println("The polynomials are:\n");

                    add(l1).print();
                    add(l2).print();
                    System.out.println("Please enter a digit (1-5): ");
                    break;
                case 4:
                    System.out.println("Which power you want to be delated from both polynomials:");
                    int k = sc.nextInt();
                    if (l1.Search(k) > 0 || l2.Search(k) > 0) {
                        System.out.println("The elements having this power has been delated.");
                        l1.Delete(k);
                        l2.Delete(k);
                        l1.listorder();
                        l1.print();
                        l2.listorder();
                        l2.print();

                    } else {
                        System.out.println("This power does not exist in any polynomial.");
                    }

                    System.out.println("Please enter a digit (1-5): ");
                    break;

            }
        }
        if (n == 5) {
            System.out.println("Exiting the program ….");
  }

}
   
}
